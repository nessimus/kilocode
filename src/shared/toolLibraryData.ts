import { McpMarketplaceItem } from "./kilocode/mcp"

const STATIC_TIMESTAMP = "2025-09-19T00:00:00.000Z"
const CURATED_SOURCE = "curated" as const

export const additionalToolLibraryItems: McpMarketplaceItem[] = [
	{
		mcpId: "browser-mcp-local",
		githubUrl: "https://github.com/modelcontextprotocol/servers/tree/main/browser",
		name: "Browser MCP (Local Chrome)",
		author: "Anthropic",
		description:
			"Control a locally running Chrome instance through the Model Context Protocol to drive websites, fill forms, and capture DOM data for automation tasks.",
		codiconIcon: "globe",
		logoUrl: "https://logo.clearbit.com/google.com",
		category: "Computer Use",
		tags: ["computer-use", "browser", "automation"],
		requiresApiKey: false,
		isRecommended: true,
		githubStars: 0,
		downloadCount: 0,
		createdAt: STATIC_TIMESTAMP,
		updatedAt: STATIC_TIMESTAMP,
		lastGithubSync: STATIC_TIMESTAMP,
		integrationType: "computer-use",
		source: CURATED_SOURCE,
		docs: {
			homepage: "https://github.com/modelcontextprotocol/servers/tree/main/browser",
			setup: "https://github.com/modelcontextprotocol/servers/tree/main/browser#readme",
		},
		setup: {
			transport: "headless-browser",
			command: "uvx",
			args: ["mcp-browser", "--chrome"],
		},
		methods: [
			{ name: "open_url", description: "Navigate the controlled browser to a URL." },
			{ name: "click_element", description: "Select an element via selector and perform a click." },
			{ name: "type_text", description: "Send typing input into an element matching a selector." },
			{ name: "evaluate_js", description: "Execute JavaScript within the active page context." },
		],
		notes: ["Requires Chrome 124+ installed locally with remote debugging port exposed by the server."],
		supportedBrands: [
			{
				name: "Google Chrome",
				integrationType: "computer-use",
				notes: "Primary browser target for on-device automation; enable Chrome remote debugging port 9222.",
			},
			{
				name: "Gmail",
				integrationType: "computer-use",
				notes: "Drive the Gmail web UI for account-specific tasks when IMAP/API are insufficient.",
			},
			{
				name: "YouTube",
				integrationType: "computer-use",
				notes: "Upload and manage videos via Studio web interface using DOM selectors.",
			},
			{
				name: "Google Sheets",
				integrationType: "computer-use",
				notes: "Fallback approach for protected sheets that resist API edits.",
			},
		],
	},
	{
		mcpId: "autocad-mcp",
		githubUrl: "https://github.com/puran-water/autocad-mcp",
		name: "AutoCAD Design Tools",
		author: "puran-water",
		description:
			"Provides Model Context Protocol access to AutoCAD for opening drawings, running commands, and exporting assets from DWG projects.",
		codiconIcon: "tools",
		logoUrl: "https://logo.clearbit.com/autodesk.com",
		category: "Design & CAD",
		tags: ["cad", "architecture", "design"],
		requiresApiKey: false,
		isRecommended: true,
		githubStars: 0,
		downloadCount: 0,
		createdAt: STATIC_TIMESTAMP,
		updatedAt: STATIC_TIMESTAMP,
		lastGithubSync: STATIC_TIMESTAMP,
		integrationType: "mcp",
		source: CURATED_SOURCE,
		docs: {
			homepage: "https://github.com/puran-water/autocad-mcp",
			setup: "https://github.com/puran-water/autocad-mcp#installation",
		},
		setup: {
			transport: "desktop",
			command: "uvx",
			args: ["puran-water/autocad-mcp"],
			env: {
				AUTOCAD_EXECUTABLE: "REPLACE_WITH_PATH_TO_AUTOCAD_BINARY",
			},
		},
		credentials: [
			{
				key: "AUTOCAD_EXECUTABLE",
				placeholder: "REPLACE_WITH_PATH_TO_AUTOCAD_BINARY",
				description: "Absolute path to AutoCAD on the managed workstation.",
			},
		],
		methods: [
			{ name: "open_file", description: "Load a DWG into AutoCAD for inspection or editing." },
			{ name: "run_command", description: "Execute native AutoCAD commands via the MCP bridge." },
			{ name: "export_view", description: "Render the current drawing view to an image file." },
		],
		notes: ["Requires AutoCAD 2024+ installed with COM automation enabled."],
	},
	{
		mcpId: "zapier-mcp",
		githubUrl: "https://github.com/zapier/zapier-mcp",
		name: "Zapier Automation Hub",
		author: "Zapier",
		description:
			"Triggers and searches across 6,000+ Zapier connectors through an MCP tool that exposes Zapier Platform APIs to agents.",
		codiconIcon: "zap",
		logoUrl: "https://logo.clearbit.com/zapier.com",
		category: "Automation",
		tags: ["automation", "integrations", "workflow"],
		requiresApiKey: true,
		isRecommended: true,
		githubStars: 0,
		downloadCount: 0,
		createdAt: STATIC_TIMESTAMP,
		updatedAt: STATIC_TIMESTAMP,
		lastGithubSync: STATIC_TIMESTAMP,
		integrationType: "mcp",
		source: CURATED_SOURCE,
		docs: {
			homepage: "https://github.com/zapier/zapier-mcp",
			setup: "https://github.com/zapier/zapier-mcp#installation",
			apiReference: "https://platform.zapier.com/docs/apis",
		},
		setup: {
			transport: "http",
			command: "uvx",
			args: ["zapier/zapier-mcp"],
			env: {
				ZAPIER_OAUTH_CLIENT_ID: "REPLACE_WITH_ZAPIER_CLIENT_ID",
				ZAPIER_OAUTH_CLIENT_SECRET: "REPLACE_WITH_ZAPIER_CLIENT_SECRET",
				ZAPIER_REFRESH_TOKEN: "REPLACE_WITH_ZAPIER_REFRESH_TOKEN",
			},
		},
		credentials: [
			{
				key: "ZAPIER_OAUTH_CLIENT_ID",
				placeholder: "REPLACE_WITH_ZAPIER_CLIENT_ID",
				description: "Client ID from Zapier Platform UI (Team Settings → OAuth).",
			},
			{
				key: "ZAPIER_OAUTH_CLIENT_SECRET",
				placeholder: "REPLACE_WITH_ZAPIER_CLIENT_SECRET",
				description: "Client secret paired with the Zapier OAuth client.",
			},
			{
				key: "ZAPIER_REFRESH_TOKEN",
				placeholder: "REPLACE_WITH_ZAPIER_REFRESH_TOKEN",
				description: "Generated refresh token providing long-lived access on behalf of the workspace owner.",
			},
		],
		methods: [
			{ name: "list_zaps", description: "Enumerate available private and shared Zaps." },
			{ name: "run_zap", description: "Invoke a Zap with dynamic input data." },
			{ name: "search_action", description: "Find supported Zapier actions by app or capability." },
		],
		notes: ["OAuth tokens inherit the permissions of the connected Zapier account; scope minimally."],
		supportedBrands: [
			{
				name: "Otter",
				integrationType: "mcp",
				notes: "Use Zapier's trigger/actions to create meetings and pull transcripts.",
			},
			{
				name: "Product Hunt",
				integrationType: "mcp",
				notes: "Publish launches, schedule posts, and monitor upvotes via Zapier.",
			},
			{
				name: "Gumroad",
				integrationType: "mcp",
				notes: "Sync customers, issues refunds, and trigger fulfillment automations.",
			},
			{ name: "HubSpot", integrationType: "mcp", notes: "Manage CRM records, deals, and marketing workflows." },
			{ name: "Descript", integrationType: "mcp", notes: "Automate transcription project creation and exports." },
			{
				name: "Airtable",
				integrationType: "mcp",
				notes: "Create/update records without writing custom API code.",
			},
		],
	},
	{
		mcpId: "google-sheets-potential",
		githubUrl: "https://developers.google.com/sheets/api",
		name: "Google Sheets API",
		author: "Google",
		description:
			"REST and gRPC APIs to read, write, and format spreadsheets; ideal for a future MCP server or direct computer use fallback.",
		codiconIcon: "table",
		logoUrl: "https://logo.clearbit.com/google.com",
		category: "Productivity",
		tags: ["sheets", "spreadsheets", "api"],
		requiresApiKey: true,
		isRecommended: false,
		githubStars: 0,
		downloadCount: 0,
		createdAt: STATIC_TIMESTAMP,
		updatedAt: STATIC_TIMESTAMP,
		lastGithubSync: STATIC_TIMESTAMP,
		integrationType: "potential-mcp",
		source: CURATED_SOURCE,
		docs: {
			homepage: "https://workspace.google.com/products/sheets/",
			apiReference: "https://developers.google.com/sheets/api/reference/rest",
			setup: "https://developers.google.com/workspace/guides/create-credentials",
		},
		setup: {
			transport: "http",
			env: {
				GOOGLE_SERVICE_ACCOUNT_KEY: "REPLACE_WITH_BASE64_ENCODED_SERVICE_ACCOUNT_JSON",
			},
		},
		credentials: [
			{
				key: "GOOGLE_SERVICE_ACCOUNT_KEY",
				placeholder: "REPLACE_WITH_BASE64_ENCODED_SERVICE_ACCOUNT_JSON",
				description: "Service account JSON for Sheets API with domain-wide delegation if needed.",
			},
		],
		methods: [
			{ name: "spreadsheets.values.get", description: "Read a range of values." },
			{ name: "spreadsheets.values.update", description: "Write values to a range." },
			{ name: "spreadsheets.batchUpdate", description: "Apply formatting and structural changes." },
		],
		notes: ["Scope the service account to least-privilege Google Workspace roles."],
	},
	{
		mcpId: "browserbase-headless",
		githubUrl: "https://github.com/browserbase/browserbase-mcp",
		name: "Browserbase MCP (Headless Cloud)",
		author: "Browserbase",
		description:
			"Provision headless Chromium sessions in Browserbase's cloud to automate complex web apps with persistent storage, screenshots, and network control.",
		codiconIcon: "cloud",
		logoUrl: "https://logo.clearbit.com/browserbase.com",
		category: "Computer Use",
		tags: ["headless", "browser", "automation"],
		requiresApiKey: true,
		isRecommended: true,
		githubStars: 0,
		downloadCount: 0,
		createdAt: STATIC_TIMESTAMP,
		updatedAt: STATIC_TIMESTAMP,
		lastGithubSync: STATIC_TIMESTAMP,
		integrationType: "computer-use",
		source: CURATED_SOURCE,
		docs: {
			homepage: "https://docs.browserbase.com/docs/mcp",
			setup: "https://github.com/browserbase/browserbase-mcp#readme",
			apiReference: "https://docs.browserbase.com/reference",
		},
		setup: {
			transport: "headless-browser",
			command: "uvx",
			args: ["browserbase-mcp"],
			env: {
				BROWSERBASE_API_KEY: "REPLACE_WITH_BROWSERBASE_API_KEY",
			},
		},
		credentials: [
			{
				key: "BROWSERBASE_API_KEY",
				placeholder: "REPLACE_WITH_BROWSERBASE_API_KEY",
				description: "Create an API key in Browserbase under Settings → API Keys.",
			},
		],
		methods: [
			{
				name: "launch_session",
				description: "Start a fresh Browserbase browser session with configurable region.",
			},
			{ name: "navigate", description: "Navigate the remote session to a URL." },
			{ name: "click", description: "Click an element located via selector in the remote session." },
			{ name: "type", description: "Type text within the remote session." },
			{ name: "screenshot", description: "Capture a screenshot from the active session." },
		],
		notes: ["Supports persistent cookies and storage using Browserbase projects."],
		supportedBrands: [
			{
				name: "LinkedIn",
				integrationType: "computer-use",
				notes: "Automate Sales Navigator prospecting with cloud browser sessions and residential IPs.",
			},
			{
				name: "Facebook",
				integrationType: "computer-use",
				notes: "Manage Meta Ads or Business Suite UIs headlessly with isolated credentials.",
			},
			{
				name: "Amazon",
				integrationType: "computer-use",
				notes: "Perform storefront or Seller Central automation without storing cookies locally.",
			},
			{
				name: "Threads",
				integrationType: "computer-use",
				notes: "Schedule posts in Meta's web experience before API access is available.",
			},
		],
	},
	{
		mcpId: "roboflow-potential",
		githubUrl: "https://docs.roboflow.com/vision-api",
		name: "Roboflow Vision API",
		author: "Roboflow",
		description:
			"Programmatic dataset management, training, and inference for computer vision models; candidates for an MCP wrapper or Zapier automation.",
		codiconIcon: "eye",
		logoUrl: "https://logo.clearbit.com/roboflow.com",
		category: "AI Services",
		tags: ["computer-vision", "api", "inference"],
		requiresApiKey: true,
		isRecommended: false,
		githubStars: 0,
		downloadCount: 0,
		createdAt: STATIC_TIMESTAMP,
		updatedAt: STATIC_TIMESTAMP,
		lastGithubSync: STATIC_TIMESTAMP,
		integrationType: "potential-mcp",
		source: CURATED_SOURCE,
		docs: {
			homepage: "https://roboflow.com",
			apiReference: "https://docs.roboflow.com/vision-api/overview",
			setup: "https://docs.roboflow.com/api-reference/authentication",
		},
		setup: {
			transport: "http",
			env: {
				ROBOFLOW_API_KEY: "REPLACE_WITH_ROBOFLOW_API_KEY",
			},
		},
		credentials: [
			{
				key: "ROBOFLOW_API_KEY",
				placeholder: "REPLACE_WITH_ROBOFLOW_API_KEY",
				description: "Create a Roboflow API key in the workspace dashboard (Settings → API Keys).",
			},
		],
		methods: [
			{ name: "upload_dataset", description: "Create or update a dataset version." },
			{ name: "train_model", description: "Trigger hosted training for a dataset version." },
			{ name: "infer", description: "Run hosted inference against an uploaded image." },
		],
		notes: ["Strong fit for async workflows that deliver predictions back via webhooks or polling."],
	},
	{
		mcpId: "1password-connect",
		githubUrl: "https://developer.1password.com/docs/connect/",
		name: "1Password Connect API",
		author: "1Password",
		description:
			"Self-hosted Connect server exposes vault items over a REST API; use it to retrieve credentials for downstream tools.",
		codiconIcon: "shield",
		logoUrl: "https://logo.clearbit.com/1password.com",
		category: "Security",
		tags: ["secrets", "vault", "api"],
		requiresApiKey: true,
		isRecommended: false,
		githubStars: 0,
		downloadCount: 0,
		createdAt: STATIC_TIMESTAMP,
		updatedAt: STATIC_TIMESTAMP,
		lastGithubSync: STATIC_TIMESTAMP,
		integrationType: "potential-mcp",
		source: CURATED_SOURCE,
		docs: {
			homepage: "https://developer.1password.com/docs/connect/",
			setup: "https://developer.1password.com/docs/connect/get-started",
			apiReference: "https://developer.1password.com/docs/connect/connect-api-reference",
		},
		setup: {
			transport: "http",
			env: {
				OP_CONNECT_HOST: "REPLACE_WITH_CONNECT_HOST_URL",
				OP_CONNECT_TOKEN: "REPLACE_WITH_CONNECT_TOKEN",
			},
		},
		credentials: [
			{
				key: "OP_CONNECT_HOST",
				placeholder: "REPLACE_WITH_CONNECT_HOST_URL",
				description: "Base URL of the deployed 1Password Connect server (e.g., https://connect.example.com).",
			},
			{
				key: "OP_CONNECT_TOKEN",
				placeholder: "REPLACE_WITH_CONNECT_TOKEN",
				description: "Integration token scoped to the required vaults.",
			},
		],
		methods: [
			{ name: "Get Item", description: "Fetch secret metadata and field values for a vault item." },
			{ name: "List Vault Items", description: "Enumerate items within an assigned vault." },
			{ name: "Get Vault", description: "Retrieve vault metadata and permissions." },
		],
		notes: ["Deploy Connect inside a private network; never expose it directly to the public internet."],
	},
	{
		mcpId: "postman-api",
		githubUrl: "https://www.postman.com/api-platform/api/",
		name: "Postman Public API",
		author: "Postman",
		description:
			"Manage Postman workspaces, collections, environments, and monitors programmatically; a good candidate for an MCP wrapper to keep API tests in sync.",
		codiconIcon: "beaker",
		logoUrl: "https://logo.clearbit.com/postman.com",
		category: "Developer Tools",
		tags: ["testing", "collections", "api"],
		requiresApiKey: true,
		isRecommended: false,
		githubStars: 0,
		downloadCount: 0,
		createdAt: STATIC_TIMESTAMP,
		updatedAt: STATIC_TIMESTAMP,
		lastGithubSync: STATIC_TIMESTAMP,
		integrationType: "potential-mcp",
		source: CURATED_SOURCE,
		docs: {
			homepage: "https://www.postman.com/",
			setup: "https://learning.postman.com/docs/developer/intro-api/",
			apiReference: "https://documenter.getpostman.com/view/631643/JsLs/?version=latest",
		},
		setup: {
			transport: "http",
			env: {
				POSTMAN_API_KEY: "REPLACE_WITH_POSTMAN_API_KEY",
			},
		},
		credentials: [
			{
				key: "POSTMAN_API_KEY",
				placeholder: "REPLACE_WITH_POSTMAN_API_KEY",
				description: "Generate from Postman under Settings → API Keys.",
			},
		],
		methods: [
			{ name: "List Collections", description: "Enumerate collections available in a workspace." },
			{ name: "Run Collection", description: "Trigger a Postman Collection run via the API." },
			{ name: "Update Environment", description: "Modify environment variables to sync secrets." },
		],
		notes: ["Use Postman roles to scope API keys narrowly to the automation workspace."],
	},
	{
		mcpId: "product-hunt-api",
		githubUrl: "https://api.producthunt.com/v2/docs",
		name: "Product Hunt GraphQL API",
		author: "Product Hunt",
		description:
			"GraphQL API for posting launches, fetching featured products, and monitoring community engagement.",
		codiconIcon: "rocket",
		logoUrl: "https://logo.clearbit.com/producthunt.com",
		category: "Marketing",
		tags: ["launch", "graphql", "marketing"],
		requiresApiKey: true,
		isRecommended: false,
		githubStars: 0,
		downloadCount: 0,
		createdAt: STATIC_TIMESTAMP,
		updatedAt: STATIC_TIMESTAMP,
		lastGithubSync: STATIC_TIMESTAMP,
		integrationType: "potential-mcp",
		source: CURATED_SOURCE,
		docs: {
			homepage: "https://www.producthunt.com/tech/api",
			apiReference: "https://api.producthunt.com/v2/docs",
			setup: "https://www.producthunt.com/posts/api",
		},
		setup: {
			transport: "http",
			env: {
				PRODUCT_HUNT_TOKEN: "REPLACE_WITH_PRODUCT_HUNT_TOKEN",
			},
		},
		credentials: [
			{
				key: "PRODUCT_HUNT_TOKEN",
				placeholder: "REPLACE_WITH_PRODUCT_HUNT_TOKEN",
				description: "Create OAuth token via Product Hunt API dashboard.",
			},
		],
		methods: [
			{ name: "createPost", description: "Submit a new product launch." },
			{ name: "votes", description: "Fetch vote counts for analytics." },
			{ name: "comments", description: "Retrieve discussion threads for engagement workflows." },
		],
		notes: ["OAuth tokens are scoped per Product Hunt user; store in 1Password Connect then inject at runtime."],
	},
	{
		mcpId: "gumroad-api",
		githubUrl: "https://gumroad.com/api",
		name: "Gumroad REST API",
		author: "Gumroad",
		description:
			"Manage products, generate license keys, and process refunds programmatically for Gumroad storefronts.",
		codiconIcon: "credit-card",
		logoUrl: "https://logo.clearbit.com/gumroad.com",
		category: "Commerce",
		tags: ["commerce", "payments", "api"],
		requiresApiKey: true,
		isRecommended: false,
		githubStars: 0,
		downloadCount: 0,
		createdAt: STATIC_TIMESTAMP,
		updatedAt: STATIC_TIMESTAMP,
		lastGithubSync: STATIC_TIMESTAMP,
		integrationType: "potential-mcp",
		source: CURATED_SOURCE,
		docs: {
			homepage: "https://gumroad.com/api",
			setup: "https://help.gumroad.com/article/205-the-gumroad-api",
			apiReference: "https://gumroad.com/api#overview",
		},
		setup: {
			transport: "http",
			env: {
				GUMROAD_ACCESS_TOKEN: "REPLACE_WITH_GUMROAD_ACCESS_TOKEN",
			},
		},
		credentials: [
			{
				key: "GUMROAD_ACCESS_TOKEN",
				placeholder: "REPLACE_WITH_GUMROAD_ACCESS_TOKEN",
				description: "Generate from Gumroad Settings → Advanced → Developer.",
			},
		],
		methods: [
			{ name: "list_sales", description: "Retrieve recent sales for fulfillment workflows." },
			{ name: "create_discount", description: "Create promotional discount codes." },
			{ name: "refund_sale", description: "Issue refunds for specific purchases." },
		],
		notes: ["Use Gumroad's test mode when developing new automations to avoid accidental customer emails."],
	},
	{
		mcpId: "desktop-automation-robotjs",
		githubUrl: "https://github.com/tanob/mcp-desktop-automation",
		name: "Desktop Automation (RobotJS)",
		author: "tanob",
		description:
			"Simulate keyboard and mouse actions on the host OS to drive GUI-only software, capture screens, and script workflows that lack APIs.",
		codiconIcon: "device-desktop",
		logoUrl: "https://logo.clearbit.com/microsoft.com",
		category: "Computer Use",
		tags: ["desktop", "automation", "robotjs"],
		requiresApiKey: false,
		isRecommended: true,
		githubStars: 0,
		downloadCount: 0,
		createdAt: STATIC_TIMESTAMP,
		updatedAt: STATIC_TIMESTAMP,
		lastGithubSync: STATIC_TIMESTAMP,
		integrationType: "computer-use",
		source: CURATED_SOURCE,
		docs: {
			homepage: "https://github.com/tanob/mcp-desktop-automation",
			setup: "https://ubos.tech/mcp/mcp-desktop-automation/",
		},
		setup: {
			transport: "desktop",
			command: "npx",
			args: ["-y", "mcp-desktop-automation"],
		},
		methods: [
			{ name: "mouse_move", description: "Move the mouse to screen coordinates." },
			{ name: "mouse_click", description: "Click using the chosen mouse button." },
			{ name: "type_text", description: "Send keystrokes to the active window." },
			{ name: "screenshot", description: "Capture screenshots for vision feedback." },
		],
		notes: ["Requires Accessibility permissions on macOS and UIAccess privileges on Windows."],
		supportedBrands: [
			{
				name: "Adobe Premiere Pro",
				integrationType: "computer-use",
				notes: "Automate timeline edits, exports, and UI navigation.",
			},
			{
				name: "Photoshop",
				integrationType: "computer-use",
				notes: "Trigger actions, apply filters, and export assets.",
			},
			{
				name: "Unity",
				integrationType: "computer-use",
				notes: "Drive editor menus, build pipelines, and play mode testing.",
			},
			{
				name: "Minecraft",
				integrationType: "computer-use",
				notes: "Control launcher and client for scripted demos.",
			},
			{ name: "CapCut", integrationType: "computer-use", notes: "Sequence video edits where no API exists." },
			{
				name: "Lemon8",
				integrationType: "computer-use",
				notes: "Post and curate content through the desktop experience.",
			},
			{ name: "Roblox", integrationType: "computer-use", notes: "Coordinate Roblox Studio publishing flows." },
			{ name: "Godot", integrationType: "computer-use", notes: "Drive editor UI for export and testing." },
		],
	},
]
